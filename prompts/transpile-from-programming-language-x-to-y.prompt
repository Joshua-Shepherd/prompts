---
title: Transpile from programming language X to Y
prompt-version: 6
prompt: |+
    ###
    Haskell: zip (map show [1,5,9]) ["a","b","c"]
    Clojure: (println (map vector '(1 2 3) '(4 5 6)))
    ###
    Clojure: (clojure.string/upper-case "MiXeD cAsE")
    Haskell: map toUpper "MiXeD cAsE"
    ###
    <2>: <1>
    <3>:
engine: OpenAI Davinci
temperature: 0.3
max-tokens: 400
top-p: 1
stop-sequences:
- "###"
stop-patterns:
- "^[a-zA-Z]+:"
vars:
- code
- from language
- to language
preprocessors:
- pen-s onelineify
- cat
- cat
# Use s-preserve-trailing-whitespace within pen.el
# Chomp is needed because of stop-patterns
postprocessor: pen-s unonelineify | chomp
examples:
- min 1 2
- Haskell
- Clojure
var-defaults:
- "(pen-selected-text)"
- "(pen-detect-language-ask)"
- "(read-string-hist \"Pen to programming language: \")"
filter: on