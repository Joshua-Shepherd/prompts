---
title: Translate Haskell to Clojure
prompt: "Haskell:\nzip (map show [1,5,9]) [\"a\",\"b\",\"c\"] \nClojure:\n(println
  (map vector '(1 2 3) '(4 5 6))) \n\nHaskell:\nmap toUpper \"MiXeD cAsE\" \nClojure:\n(clojure.string/upper-case
  \"MiXeD cAsE\")\n\nHaskell:\nputStrLn \"Hello World\"\nClojure:\n(println \"Hello
  World\")\n\nHaskell: \nimport Data.Time.Clock\nimport Data.Time.Calendar\ndate ::
  IO (Integer, Int, Int) -- :: (year, month, day)\ndate = getCurrentTime >>= return
  . toGregorian . utctDay\nClojure: \n(defn date [] (.toString (java.util.Date.)))\n\nHaskell:
  \n<1>\nClojure:\n"
engine: davinci
temperature: 0.3
max-tokens: 60
top-p: 1
frequency-penalty: 0.5
presence-penalty: 0
best-of: 1
stop-sequences:
- "\n\n"
vars:
- haskell code
examples:
- min 1 2
